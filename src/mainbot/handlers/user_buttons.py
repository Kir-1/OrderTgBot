from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy import select, Result

from ..texts import profile_text, information_text, queue_text, price_text
from src.core.models import Worker, User
from src.core import database
from ..keyboards import profile_menu, accepinfo_menu
from ..states import Order

user_buttons_router = Router()


@user_buttons_router.message(F.text == "üë®üèº‚Äçüíª–ü—Ä–æ—Ñ–∏–ª—åüë®üèº‚Äçüíª")
async def profile(message: Message) -> None:
    async with database.session_factory() as session:
        user = await session.get(User, {"id": message.from_user.id})

    await message.answer(
        await profile_text(user=user, user_name=message.from_user.username),
        reply_markup=await profile_menu(user.notification),
    )


@user_buttons_router.message(F.text == "‚ùó–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚ùó")
async def information(message: Message) -> None:
    async with database.session_factory() as session:
        user = await session.get(User, {"id": message.from_user.id})

    await message.answer(
        text=await information_text(
            project_manager="@akahuub",
            support="@Aputalabashuneba",
            theme="https://zelenka.guru/threads/5301100/",
        ),
        reply_markup=await accepinfo_menu() if not user.accept_info else None,
    )


@user_buttons_router.message(F.text == "üö™–û—á–µ—Ä–µ–¥—åüö™")
async def queue(message: Message) -> None:
    async with database.session_factory() as session:
        stmt = select(Worker)
        result: Result = await session.execute(stmt)
        workers = list(result.scalars().all())

    await message.answer(text=await queue_text(workers=workers))


@user_buttons_router.message(F.text == "üìà–ó–∞–∫–∞–∑–∞—Ç—å SEOüìà")
async def order(message: Message, state: FSMContext) -> None:
    async with database.session_factory() as session:
        user = await session.get(User, {"id": message.from_user.id})
    if not user.accept_info:
        await message.answer(
            "<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>"
        )
        return

    await message.answer(text=await price_text(100))
    await state.set_state(Order.vido_link)
